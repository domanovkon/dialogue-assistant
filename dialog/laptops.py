from vocabulary.general import LoadData
from smiles import sml
from telegram import ParseMode
from telegram.ext import ConversationHandler
from vocabulary.laptop import isOneKeyword, isAllKeyword, findByName
from standard_phrases import NOT_UNDERSTAND, NOT_FOUND
from random import choice


class Laptop:
    def __init__(self):
        self.message = None
        self.effective_chat = None

    def find(self, context):
        msg = self.message.text
        if isAllKeyword(msg):
            laptop_list = LoadData()
            laptop_list_counter = 0
            for x in laptop_list:
                laptop_list_counter = laptop_list_counter + 1
                str1 = x[0] + "\n" + "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + x[1] + "\n" + "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: " + x[2] + "\n" + \
                       "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –û–ó–£: " + str(x[3]) + "\n" + "–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: " + x[4] + "\n" + "–¶–µ–Ω–∞: " + x[5]
                self.message.reply_text(sml[laptop_list_counter] + " " + str1 + " üòé")
            self.message.reply_text("–ß—Ç–æ –µ—â–µ –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?", parse_mode=ParseMode.MARKDOWN)
            return "all"
        elif isOneKeyword(msg):
            self.message.reply_text("–ò—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–æ—É—Ç–±—É–∫–∞ üî°")
            return "laptopName"
        else:
            self.message.reply_text(choice(NOT_UNDERSTAND))
            return "laptop"

    def findByName(self, context):
        msg = self.message.text
        laptop = findByName(msg)
        if not laptop:
            self.message.reply_text(choice(NOT_FOUND))
            return "laptopName"
        else:
            str1 = laptop[0] + "\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ üí™" + "\n" + "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + laptop[1] + "\n" + "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: " + laptop[2] + "\n" + \
                   "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –û–ó–£: " + str(laptop[3]) + "\n" + "–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: " + laptop[4] + "\n" + "–¶–µ–Ω–∞: " + laptop[5]
            self.message.reply_text(str1 + " üòé")
            self.message.reply_text("–ß–µ–º —è –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", parse_mode=ParseMode.MARKDOWN)
        return "all"
